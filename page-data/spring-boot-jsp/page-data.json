{"componentChunkName":"component---src-templates-blog-post-index-js","path":"/spring-boot-jsp/","webpackCompilationHash":"abf6e32d026ca5c929bb","result":{"data":{"site":{"siteMetadata":{"title":"nevercaution","author":"nevercaution"}},"markdownRemark":{"id":"0de092ae-2315-5cab-97b4-2b5b24290f80","html":"<h3>view를 추가해야한다.</h3>\n<p>spring 을 사용하다가 spring boot 로 넘어오면서 front, back 을 나누어서 백단은 나름 Restful 하게 해서 api 콜만 처리하는 방식으로 변경하는 중이다.(front 는 react로 구성하는 중이다.) 그래서 spring boot 에서는 따로 view 처리해야할 일이 없었는데 기존에 spring 에서 view 처리를 해주는 요청을 가져와야 할일이 생겼다.\n하지만 찾아보니 기존에 spring 에서 하던 방법으로는 안될 것 같다.\n왜냐하면 <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-web-applications.html#boot-features-jsp-limitations\">spring boot 에서는 jar 로 사용할 때는 jsp를 사용할 수 없다고 한다.</a>\n내용을 읽어보니 boot에 내장 tomcat에 하드코딩 패턴때문에 jar형식으로는 webapp내용을 가져올 수 없다고 한다. 그리고 공식적으로 jsp를 지원하지 않는다고 한다. boot에서 밀고 있는 template engine 들이 여러개 있었는데 간단한 view 하나 추가하는데 공수가 많이 들게되면 좋지 않을꺼라 생각해서 jsp로 view 를 구성하는 방법을 시도해보았다.\n일단 작업을 시작하기 전에 현재 사용하고 있는 버전들을 정리하고 간다.</p>\n<h3>사용하고 있는 버전은 다음과 같다.</h3>\n<ul>\n<li>spring boot 1.5.7</li>\n<li>gradle 4.4</li>\n</ul>\n<h3>나중에는 없어질 view 이지만</h3>\n<p>front작업이 react로 완료되면 이 view 는 더이상 필요하지 않다.\n그래서 나는 최소한의 공수로 기존에 있는 jsp 파일을 사용하여 가볍게 포팅만 하고자 했다.</p>\n<hr>\n<h2>1차 시도</h2>\n<p>spring boot 에서 jsp view를 사용하기 위해 spring에서 구성하는 방법과 추가적으로 필요한 설정들을 해주었다.\nspring boot 의 내장 tomcat에는 jsp parser가 없기 때문에 의존 패키지를 추가해주어야 한다.</p>\n<ul>\n<li>build.gradle</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">derendencies <span class=\"token punctuation\">{</span>\n    compile<span class=\"token punctuation\">(</span><span class=\"token string\">'javax.servlet:jstl'</span><span class=\"token punctuation\">)</span>\n    compile<span class=\"token punctuation\">(</span><span class=\"token string\">\"org.apache.tomcat.embed:tomcat-embed-jasper\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>그리고 구조는 아래와 같이 구성했다. main밑에 webapp폴더를 추가해서 jsp파일을 추가해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span>\n├── build.gradle\n├── gradlew\n├── gradlew.bat\n└── src\n    ├── main\n    │   ├── java\n    │   │   └── com\n    │   │       └── example\n    │   │           └── demo\n    │   │               ├── DemoApplication.java\n    │   │               └── MyController.java\n    │   ├── resources\n    │   │   └── application.properties\n    │   └── webapp\n    │       └── WEB-INF\n    │           └── jsp\n    │               └── index.jsp\n    └── <span class=\"token builtin class-name\">test</span></code></pre>\n      </div>\n<p>spring boot 는 webapp의 위치를 모르기 때문에 설정파일에 경로를 명시해주어야 한다.</p>\n<ul>\n<li>application.properties</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">spring.mvc.view.prefix<span class=\"token operator\">=</span>/WEB-INF/jsp/\nspring.mvc.view.suffix<span class=\"token operator\">=</span>.jsp</code></pre>\n      </div>\n<p>설정은 다했다. 이제 controller에서 view를 호출해보자.</p>\n<ul>\n<li>MyController.java</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\">\n      <pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">ModelAndView</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyController</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ModelAndView</span> view <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelAndView</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        view<span class=\"token punctuation\">.</span><span class=\"token function\">addObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> view<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>설정파일에서 prefix, suffix를 적어주었기 때문에 view이름은 파일이름만 넣어주면 된다.</p>\n<ul>\n<li>index.jsp</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\">\n      <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello world<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n        hello ${text}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<p>이제 bootRun 을 하면 build 를 하고 테스트를 해볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">$ ./gradlew clean bootRun\n:compileJava\n:processResources\n:classes\n:findMainClass\n:bootRun</code></pre>\n      </div>\n<ul>\n<li>\n<p>localhost:8080/</p>\n<div class=\"gatsby-highlight\" data-language=\"html\">\n      <pre class=\"language-html\"><code class=\"language-html\">Hello world</code></pre>\n      </div>\n</li>\n</ul>\n<p>hello world</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">build 명령어로 jar파일을 만들어 보자.\n```sh\n$ ./gradlew clean build\n:compileJava\n:processResources\n:classes\n:findMainClass\n:jar\n:bootRepackage\n:assemble\n:compileTestJava\n:processTestResources NO-SOURCE\n:testClasses\n:test\n:check\n:build\n\nBUILD SUCCESSFUL\n\nTotal time: 1.494 secs</code></pre>\n      </div>\n<p><code class=\"language-text\">./build/libs/testGradle-0.0.1-SNAPSHOT.jar</code> 에 jar가 만들어졌다. 이걸로 직접 띄워서 호출해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">$ java -jar build/libs/testGradle-0.0.1-SNAPSHOT.jar</code></pre>\n      </div>\n<p>잘 뜨는 것을 확인 할 수 있다. 그런데 더이상 boot진영에서도 jsp파일을 그대로 쓰는걸 권장하고 있지 않으니 그냥 추천해주는 template engine로 넘어가야겠다는 생각이 들었다.</p>\n<h2>2차 시도</h2>\n<p>찾아보니 정말 <a href=\"%22http://www.baeldung.com/spring-template-engines%22\">여러가지 template engine</a>들이 있었다. 곰곰히 찾아보다 간단해 보이는 <a href=\"%22https://freemarker.apache.org/%22\">Free Marker</a>를 써보기로 했다.\n설정을 추가해주는 것도 간단하다. 추가를 해보자.</p>\n<ul>\n<li>build.gradle</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\">dependencies <span class=\"token punctuation\">{</span>\n    compile<span class=\"token punctuation\">(</span><span class=\"token string\">'org.springframework.boot:spring-boot-starter-freemarker'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>그리고 jsp로 인한 설정들을 모두 제거해준다.</p>\n<ul>\n<li>application.properties</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#spring.mvc.view.prefix=/WEB-INF/jsp/</span>\n<span class=\"token comment\">#spring.mvc.view.suffix=.jsp</span></code></pre>\n      </div>\n<p>그리고 free marker 의 확장자는 <code class=\"language-text\">.ftl</code> 이다. 기본적인 파일 위치는 <code class=\"language-text\">resources/templates/</code> 이다.\n이에 따라 파일명을 수정해주고 이동까지 하면 아래와 같이 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span>\n├── build.gradle\n├── gradle\n│   └── wrapper\n│       ├── gradle-wrapper.jar\n│       └── gradle-wrapper.properties\n├── gradlew\n├── gradlew.bat\n└── src\n    ├── main\n    │   ├── java\n    │   │   └── com\n    │   │       └── example\n    │   │           └── demo\n    │   │               ├── DemoApplication.java\n    │   │               └── MyController.java\n    │   └── resources\n    │       ├── application.properties\n    │       └── templates\n    │           └── index.ftl\n    └── <span class=\"token builtin class-name\">test</span>\n        └── java\n            └── com\n                └── example\n                    └── demo\n                        └── DemoApplicationTests.java</code></pre>\n      </div>\n<p>위와 같이 설정하고 빌드를 하고 jar파일을 띄워주면 1차시도와 동일한 결과가 나온다.\n처음에는 jsp파일을 가지고 어떻게든 띄워보려고 노력했지만 다른 template engine을 보니 복잡한 jsp파일이 아니라면 굳이 사용하지 않아도 될거라는 생각이 들었다.</p>\n<h2>결론</h2>\n<p>아무래도 이제는 spring boot를 사용하면서 jsp를 사용하기는 어려울듯 싶다. 나도 결국에는 다른 template engine을 사용했는데 설정부터 적용이 너무 편해진 느낌.\n각 template engine마다 문법이 조금 달라서 개인의 기호에 맞게 써야겠다만..(예전에 node를 할 때 <a href=\"%22https://www.npmjs.com/package/jade%22\">jade</a>같은 경우엔 적잖은 충격을 받았었다.)\n아무래도 아직까지는 html친화적인 문법이 조금은 더 익숙한 느낌이다.</p>","excerpt":"view를 추가해야한다. spring 을 사용하다가 spring boot 로 넘어오면서 front, back 을 나누어서 백단은 나름 Restful 하게 해서 api 콜만 처리하는 방식으로 변경하는 중이다.(front 는 react…","frontmatter":{"title":"spring boot 에서 jsp view 만들기 (feat freemarker)","date":"2018-02-22","tags":["springboot","jsp","freemarker","gradle"],"keywords":["spring jsp"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/spring-boot-jsp/","previous":{"fields":{"slug":"/django-orm-standalone/"},"frontmatter":{"title":"Django orm standalone feat(docker)","tags":["python","django","orm","docker"],"published":true}},"next":{"fields":{"slug":"/elasticsearch-rest-client/"},"frontmatter":{"title":"Spring-boot 에서 Elasticsearch java rest client 사용하기","tags":["springboot","elasticsearch","restclient","javaclient","transportlyer"],"published":true}}}}}