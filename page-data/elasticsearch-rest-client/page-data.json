{"componentChunkName":"component---src-templates-blog-post-index-js","path":"/elasticsearch-rest-client/","result":{"data":{"site":{"siteMetadata":{"title":"nevercaution","author":"nevercaution"}},"markdownRemark":{"id":"95ab5a9e-f260-5f1a-b939-480ef029dc42","html":"<h3>elasticsearch 버전을 올려야 한다.</h3>\n<p>검색 서비스를 개선하면서 사내에서 elasticsearch 를 사용하고 있다.\n처음에 사용했던 버전은 개발 당시의 가장 최근 버전인 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/5.1/index.html\">elasticsearch 5.1.1</a> 버전이다.\nspring boot 에 연동했는데 <a href=\"https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-elasticsearch\">spring-boot-data-elasticsearch-starter</a> 는 (글을 작성하는) 아직까지도 2.x 버전만 지원하고 있어 직접 <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-api/5.1/client.html\">client</a> 를 붙이기로 했다.</p>\n<p>  개인적인 생각으로는 나중에 개발이 되어질 spring-boot-data-elasticsearch-starter 로 재구현해도 되긴 하겠지만 elasticsearch를 사용하면서 느낀점은 굳이 starter를 사용할 필요는 없다고 생각한다.\nrepository와 model로 나뉘어 orm처럼 사용하면 편하기야 할테지만 직접 쿼리를 만들면서 튜닝하는 부분이 재미있기도 하고 좀 더 세세하게 만질 수 있다고 생각하기 때문이다.</p>\n<p>elasticsearch 는 버전업이 빠른 편이다. 6.x 도 꾸준히 올라가는 추세고 곧있으면 7.x 이 나오고 9.x 까지 로드맵이 그려져 있다. 다행히 5.1.x 버전대에서 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/5.6/rolling-upgrades.html\">rolling upgrade</a> 가 가능하기 때문에 5.x 의 마지막 버전인 5.6.8 까지 따라 올라가야 겠다고 생각했다. 그러다가 문득 <a href=\"https://www.elastic.co/blog/state-of-the-official-elasticsearch-java-clients\">State of the official Elasticsearch Java Clients</a> 라는 포스팅을 보게 되었다. 처음에 java client 를 붙이려면 공식 문서에서는 <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-api/5.1/transport-client.html\">transport client</a> 로 연동하도록 안내한다. 하지만 위의 포스팅의 여러 문제점으로 인해 앞으로는 <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-api/6.2/client.html\">Rest client 를 사용하도록 권장하고 있다.</a></p>\n<p>Java Rest Client 는 두가지 방식이 있다.</p>\n<ul>\n<li>Java Low Level REST Client</li>\n<li>Java High Level REST Client</li>\n</ul>\n<p>low level 에서는 요청을 직접 만들어서 호출하는 방식인데, 나는 high level로 작업하기로 했다.\n(참고로 rest client는 5.6부터 제공되었다.)</p>\n<h3>서론이 조금 길었다.</h3>\n<p>내가 elasticsearch 버전을 올리기로 생각한 이유는 <a href=\"https://www.elastic.co/support/eol\">elasticsearch 기술 지원</a> 때문이다.\n내가 사용하고 있는 5.1.x 는 2018-06-08 까지만 공식지원을 하고 있다.\n물론 공식 지원이 끊기더라도 검색 서비스를 구동함에는 큰 지장은 없지만, 메이져 버전이 두개 이상 차이가 나게 되었을 때 버전을 올려야 하는 상황이 오면 rolling upgrade도  사용할 수 없기 때문에 이참에 6.2 로 올라가기로 마음먹었다. 현재 버전에서 한번에 올라가는건 안되기 때문에 다음과 같이 버전올림 순서를 정하기로 했다.</p>\n<h2>업데이트 순서</h2>\n<ol>\n<li>elasticsearch 5.1.1 -> 5.6.8 로 rolling upgrade</li>\n<li>spring-boot elasticsearch java client 5.1.1 -> 5.6.8 로 업데이트 후 배포</li>\n<li>elasticsearch 5.6.8 -> 6.2.2 로 <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-upgrade.html\">rolling upgrade</a></li>\n<li>spring-boot elasticsearch java client 5.6.8 -> 6.2.2 로 업데이트 후 배포</li>\n</ol>\n<p><a href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-rest/5.6/java-rest-high-compatibility.html\">메이져 버전별로의 호환성</a>에 따라 5.x 버전끼리는 문제없이 통신을 할 수 있다. 물론 6.x 끼리의 버전도 문제가 없었는데, 테스트 결과 5.6.8 에서 6.2.2 도 호출이 가능했다.\n클라이언트를 보니 모든 기능을 사용할 수 있지는 않고 부분적인 기능들만 사용가능할 것으로 보인다. 그리고 상위 버전 호환은 괜찮아도 하위 버전 호환은 기능이 구현되지 않을 가능성이 있어 문제의 여지가 있다.</p>\n<h3>rolling upgrade</h3>\n<p>현재 사용하고 있는 rolling upgrade 스크립트이다. 구글링 해보니 좀 더 유려한 스크립트 들이 많이 있는데 나는 간단한 동작들만 사용하는 중이다.</p>\n<p>일단 구동중인 es를 내린다.\n<code class=\"language-text\">shut_down.sh</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n\n<span class=\"token comment\"># disable shard allocation</span>\n<span class=\"token function\">curl</span> -XPUT <span class=\"token string\">'localhost:9200/_cluster/settings?pretty=true'</span> -d <span class=\"token string\">'{\n    \"transient\" : {\n        \"cluster.routing.allocation.enable\" : \"none\"\n    }\n}'</span>\n\n<span class=\"token comment\"># shutdown</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> elasticsearch stop</code></pre>\n      </div>\n<p>정상적으로 내려간 것을 확인한 후 elasticsearch 버전을 올려 재설치하도록 한다. 그리고 다시 구동시켜 주자.</p>\n<p><code class=\"language-text\">start.sh</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env bash</span>\n\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> elasticsearch start\n\n<span class=\"token assign-left variable\">STATUS</span><span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>\n<span class=\"token keyword\">while</span> <span class=\"token operator\">!</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$STATUS</span>\"</span> <span class=\"token operator\">=</span>~ <span class=\"token punctuation\">(</span><span class=\"token punctuation\">\\</span><span class=\"token string\">\"tagline<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> : <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>You Know, for Search<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>) ]];\ndo\n    echo \"</span>fetching http://localhost:9200<span class=\"token string\">\"\n    STATUS=<span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">curl</span> -sS -XGET http://localhost:9200<span class=\"token variable\">`</span></span>\n    sleep 1\ndone\n\ncurl -XPUT 'localhost:9200/_cluster/settings?pretty=true' -d '{\n    \"</span>transient<span class=\"token string\">\" : {\n        \"</span>cluster.routing.allocation.enable<span class=\"token string\">\" : \"</span>all\"\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>'</code></pre>\n      </div>\n<p>자 이제 버전도 올렸으니 client 를 변경해보도록 하자.</p>\n<h2>client 에서 rest client</h2>\n<p>위에서 설명한 것과 같이 앞으로는 rest client 를 써야만 하는 시점이 온다.\n지금 당장은 바꾸지 않아도 되지만 (완성이 되지 않아 할 수도 없지만) 어떻게 바뀌는지 느낌만 살펴보자.\n기존에 transport layer로 붙는 client를 rest client로 변경하는 작업을 해보자. 일단 설정부터 변경해야 한다.</p>\n<h3>setting</h3>\n<p><code class=\"language-text\">build.gradle</code></p>\n<div class=\"gatsby-highlight\" data-language=\"gradle\">\n      <pre class=\"language-gradle\"><code class=\"language-gradle\">dependencies {\n    compile &#39;org.elasticsearch:elasticsearch:6.2.2&#39;\n    compile &#39;org.elasticsearch.client:elasticsearch-rest-high-level-client:6.2.2&#39;\n}</code></pre>\n      </div>\n<p>그리고 기존에 붙었던 <code class=\"language-text\">9300</code>포트가 아닌 <code class=\"language-text\">9200</code>포트로 접속해야 한다.\n<code class=\"language-text\">application.yml</code></p>\n<div class=\"gatsby-highlight\" data-language=\"yml\">\n      <pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">elasticsearch</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hosts</span><span class=\"token punctuation\">:</span> host1.com<span class=\"token punctuation\">,</span> host2.com\n  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9200</span></code></pre>\n      </div>\n<h3>configuration</h3>\n<p>설정파일을 고쳤으면 configuration쪽을 손봐주도록 하자.\n기존의 config와 비교를 해보면 다음과 같다.</p>\n<p><code class=\"language-text\">기존 ElascitsearchConfig.java</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\">\n      <pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ElasticsearchConfig</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#{'${elasticsearch.hosts}'.split(',')}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> hosts<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${elasticsearch.port}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Client</span> <span class=\"token function\">client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Settings</span> settings <span class=\"token operator\">=</span> <span class=\"token class-name\">Settings</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"client.transport.sniff\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">PreBuiltTransportClient</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PreBuiltTransportClient</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> host <span class=\"token operator\">:</span> hosts<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">InetSocketTransportAddress</span> item <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InetSocketTransportAddress</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InetAddress</span><span class=\"token punctuation\">.</span><span class=\"token function\">getByName</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            client<span class=\"token punctuation\">.</span><span class=\"token function\">addTransportAddresses</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> client<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><code class=\"language-text\">변경된 ElascitsearchConfig.java</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\">\n      <pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ElasticsearchConfig</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#{'${elasticsearch.hosts}'.split(',')}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> hosts<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${elasticsearch.port}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Bean</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RestHighLevelClient</span> <span class=\"token function\">getRestClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HttpHost</span><span class=\"token punctuation\">></span></span> hostList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> host <span class=\"token operator\">:</span> hosts<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            hostList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpHost</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">,</span> <span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">RestClientBuilder</span> builder <span class=\"token operator\">=</span> <span class=\"token class-name\">RestClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span>hostList<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpHost</span><span class=\"token punctuation\">[</span>hostList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestHighLevelClient</span><span class=\"token punctuation\">(</span>builder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<h3>service</h3>\n<p>약간씩 달라진 부분들을 살펴보자. 큰틀은 변경되진 않았고 호출하는 클래스나 메소드들이 조금씩 변경되었다.\n개인 적인 느낌으로는 각 클래스별로 역할이 좀 더 충실해졌다고 생각이 들었다.</p>\n<p><code class=\"language-text\">create</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\">\n      <pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// before</span>\n<span class=\"token class-name\">Client</span> client<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">IndicesAdminClient</span> adminClient <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">admin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">indices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">CreateIndexResponse</span> createIndexResponse <span class=\"token operator\">=</span> adminClient<span class=\"token punctuation\">.</span><span class=\"token function\">prepareCreate</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index_name\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">setSettings</span><span class=\"token punctuation\">(</span><span class=\"token function\">seriesSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">addMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"type name\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">seriesIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// after</span>\n<span class=\"token class-name\">RestHighLevelClient</span> client<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">CreateIndexRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CreateIndexRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function\">settings</span><span class=\"token punctuation\">(</span><span class=\"token function\">seriesSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">XContentType</span><span class=\"token punctuation\">.</span>JSON<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"type_name\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">seriesIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">XContentType</span><span class=\"token punctuation\">.</span>JSON<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">indices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p><code class=\"language-text\">search query</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\">\n      <pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// common</span>\n<span class=\"token class-name\">QueryBuilder</span> qb <span class=\"token operator\">=</span> <span class=\"token class-name\">QueryBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">matchQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// before</span>\n<span class=\"token class-name\">Client</span> client<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SearchResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">prepareSearch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setTypes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"type_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setQuery</span><span class=\"token punctuation\">(</span>qb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// after</span>\n<span class=\"token class-name\">RestHighLevelClient</span> client<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SearchSourceBuilder</span> searchSourceBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchSourceBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>qb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SearchRequest</span> searchRequest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"index_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">types</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"type_name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>searchSourceBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">SearchResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>searchRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// common</span>\nresponse<span class=\"token punctuation\">.</span><span class=\"token function\">getHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// do something</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>간단하게 index 를 만들고 검색하는 부분까지의 메소드들을 보았다. 나는 여기에 추가로 alias, exists, multi_search 등을 사용하고 있지만 아직까지 6.2.x 에는 해당 메소드가 없다. 어떻게든 해보려고 엔진소스를 들어가서 한참을 살펴보다가 혹시나 해서 master 브랜치를 받아보니 해당 메소드들이 있더라.. (현재 master 브랜치의 버전은 7.0.0-alpha1 이다.)</p>\n<h2>결론</h2>\n<p>미리 적용을 해놓을까 해서 버전별로 소스를 살펴 보았지만 아직까지 모든 메소드들이 구현되어 있지 않기도 하고 <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-api/5.6/client.html\">java client가 없어지려면 8.0 까지 올라가야 하니</a> 아직은 조금 여유가 있어보인다.\n그래도 버전이 올라가는 속도를 보면 7.0 메이져 버전이 나오고 rest client가 완성이 되었을 때 슬슬 적용하면 될 것 같다. <del>세수하러 왔다가 물만 먹고 가는 느낌</del></p>","excerpt":"elasticsearch 버전을 올려야 한다. 검색 서비스를 개선하면서 사내에서 elasticsearch 를 사용하고 있다.\n처음에 사용했던 버전은 개발 당시의 가장 최근 버전인 elasticsearch 5.1.1 버전이다.\nspring boot…","frontmatter":{"title":"Spring-boot 에서 Elasticsearch java rest client 사용하기","date":"2018-03-15","tags":["springboot","elasticsearch","restclient","javaclient","transportlyer"],"keywords":["엘라스틱서치 레스트 클라이언트"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/elasticsearch-rest-client/","previous":{"fields":{"slug":"/spring-boot-jsp/"},"frontmatter":{"title":"spring boot 에서 jsp view 만들기 (feat freemarker)","tags":["springboot","jsp","freemarker","gradle"],"published":true}},"next":{"fields":{"slug":"/spring-boot-actuator/"},"frontmatter":{"title":"Spring Boot Actuator 를 이용해 버전 정보 제공하기","tags":["springboot","gradle","spring-boot-actuator"],"published":true}}}}}